/*
 * bfs.c
 *
 *  Created on: Oct 30, 2017
 *      Author: kenda
 */
#include <assert.h>
#include <stdlib.h>
#include <stdio.h>
#include <print.h>
#include "bfs.h"

struct list_element_t_struct;

struct list_element_t_struct{
    int rank;
    struct list_element_t_struct*next;
};

typedef struct list_element_t_struct list_element_t;

typedef struct{
    list_element_t *head;
    list_element_t *tail;
}list_t;


void push_back(list_t* list, int rank);
void free_list(list_t* list);
int remove_front(list_t* list);
void push_front(list_t* list, int rank);
void fill_neighbors(int neighbors[], int rank);

list_t init_list(){
    //should declare a new list_t variable
    //make sure both head and tail are null and return the thing
    list_t newListEle;
    newListEle.head = NULL;
    newListEle.tail = NULL;

    return newListEle;
}

void push_back(list_t* list, int rank){
    list_element_t* tmp;
    list_element_t* holder;

    tmp = (list_element_t*)malloc(sizeof(list_element_t));
    assert(tmp != NULL);
    tmp->rank = rank;
    tmp->next = NULL;
    if(list->head == NULL && list->tail == NULL){
        list->head = tmp;
        list->tail = tmp;
    }
    else{
        holder = list->head;
        while(holder != NULL){
            if(holder->next == NULL){
                holder->next = tmp;
                list->tail = tmp;
                break;
            }
            else{
                holder = holder->next;
            }
        }
    }
}

void free_list(list_t* list){
    list_element_t* holder;
    list_element_t* tmp;

    holder = list->head;
    while(holder->next != NULL){

            tmp = holder->next;
            free(holder);
            holder = tmp;

    }
    free(holder);
    *list = init_list();


}

int remove_front(list_t* list){
    //if list is empty return -1
    //remove first element
    //deallocate that memory for first element
    //fix head and tail pointers
    //if last element is removed then reinitalize list
    list_element_t* tmp;
    tmp = list->head;

    int holder;
    if(tmp == NULL){
        holder =  -1;
    }
    else if (tmp->next == NULL){
        list->head = NULL;
        list->tail = NULL;
        holder = tmp->rank;
        free(tmp);
        *list = init_list();
    }
    else{
        list->head = tmp->next;
        holder = tmp->rank;
        free(tmp);
    }
    return holder;
}

void push_front(list_t* list, int rank){
    list_element_t* tmp;
    tmp = (list_element_t*)malloc(sizeof(list_element_t));
    tmp->rank = rank;
    tmp->next = NULL;

    if(list->head == NULL && list->tail == NULL){
        list->head = tmp;
        list->tail = tmp;
    }
    else{
        tmp->next = list->head;
        list->head = tmp;
    }
}

void fill_neighbors(int neighbors[], int rank){
    //0 = top
    //1 = bottom
    //2 = left
    //3 = right

    //10*10 grid

    int row = ROW(rank);
    int col = COL(rank);
  //  int top,bottom,left,right;

    //top
    if(row == 0){
        neighbors[0] = -1;
    }
    else{
        neighbors[0] = RANK(row-1, col);
    }

    //bottom
    if(row == 9){
        neighbors[1] = -1;
    }
    else{
        neighbors[1] = RANK(row+1, col);
    }

    //left
    if(col == 0){
        neighbors[2] = -1;
    }
    else{
        neighbors[2] = RANK(row, col-1);
    }

    //right
    if(col == 9){
        neighbors[3] = -1;
    }
    else{
        neighbors[3] = RANK(row, col+1);
    }
}

void find_shortest_path(int start_rank, int goal_rank, const int obstacles[]){
    int predecessors[ELEMENT_COUNT];

    for(int i = 0; i<ELEMENT_COUNT; i++){
        if(obstacles[i] == 1){
            predecessors[i] = -2;
        }
        else{
            predecessors[i] = -1;
        }
    }

    predecessors[start_rank] = start_rank;

    list_t list;
    list = init_list();
    push_front(&list, start_rank);
    int neighbors[4];

    while(1){
        int maybeGoal = remove_front(&list);
        if(maybeGoal == goal_rank){
            break;
        }
        fill_neighbors(neighbors, maybeGoal);

        if(neighbors[0] != -1 && predecessors[neighbors[0]] == -1){
            push_back(&list, neighbors[0]);
            predecessors[neighbors[0]] = maybeGoal;
            //update element in predecessors to have the rank being considered

        }
        if(neighbors[1] != -1 && predecessors[neighbors[1]] == -1){
            push_back(&list, neighbors[1]);
            predecessors[neighbors[1]] = maybeGoal;
            //update element in predecessors to have the rank being considered

        }
        if(neighbors[2] != -1 && predecessors[neighbors[2]] == -1){
            push_back(&list, neighbors[2]);
            predecessors[neighbors[2]] = maybeGoal;
            //update element in predecessors to have the rank being considered

        }
        if(neighbors[3] != -1 && predecessors[neighbors[3]] == -1){
            push_back(&list, neighbors[3]);
            predecessors[neighbors[3]] = maybeGoal;
            //update element in predecessors to have the rank being considered

        }
    }

    free_list(&list);
    list = init_list();

    int i = goal_rank;
    while(1){
        if(i == start_rank){
            push_front(&list, i);
            break;
        }
        else{
            push_front(&list, i);
            i = predecessors[i];
        }
    }


    int headRank;
    unsigned r, c;
    //print out sequence of cells:
    while(list.head != NULL){
        headRank = remove_front(&list);
        r = ROW(headRank);
        c = COL(headRank);
        printf("( %u , %u )\n", r, c);
    }

   free_list(&list);
}
int test_main(){


    list_t l1;
    l1 = init_list();

    //int neighborTest[4];

   // l1 = init_list();
  //  assert(l1.head == l1.tail && l1.head == NULL);


 /*   l1 = init_list();
    push_back(&l1, 10);
    assert(l1.head != NULL);
    assert(l1.tail == l1.head);
    assert(l1.head->rank == 10);
    assert(l1.head->next == NULL);

    push_back(&l1, 20);
    assert(l1.head != l1.tail);
    assert(l1.head->rank == 10);
    assert(l1.head->next == l1.tail);
    assert(l1.tail->rank == 20);
    assert(l1.tail->next == NULL);
 */
   /* l1 = init_list();
    push_back(&l1, 10);
    push_back(&l1, 20);
    push_back(&l1, 30);
    free_list(&l1);
    assert(l1.head == NULL && l1.tail == l1.head);
    */

  /*  push_back(&l1, 10);
    push_back(&l1, 20);
    push_back(&l1, 30);
    remove_front(&l1);
    assert(l1.head->rank == 20);
    remove_front(&l1);
    assert(l1.head->rank == 30);
    remove_front(&l1);
    assert(l1.head == NULL && l1.tail == l1.head);
    */
 /*   push_back(&l1, 10);
 //   push_back(&l1, 20);
 //   push_back(&l1, 30);
    push_front(&l1, 40);
    assert(l1.head->rank == 40 && l1.tail == l1.head);
    assert(l1.tail->rank == 40);*/
/*
    fill_neighbors(neighborTest, RANK(7,7));
    assert(neighborTest[0] != -1);
    assert(neighborTest[2] != -1);
    assert(neighborTest[1] != -1);
    assert(neighborTest[3] != -1);
*/
    return 0;
}
