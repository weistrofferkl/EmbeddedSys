/*
 * main.xc
 *
 *  Created on: Sep 16, 2017
 *      Author: kenda
 */
#include <xs1.h>
#include <stdio.h>
#include<stdlib.h>


#define FLASH_DELAY (XS1_TIMER_HZ/2);
in port iButton = XS1_PORT_32A; //32 bit vector
out port oLed = XS1_PORT_1A;
out port oLed2 = XS1_PORT_1D;
int times[10];
timer tmr;

unsigned int compute_difference(unsigned int t0, unsigned int t1){

    if(t1 > t0){
        return ((t1-t0));
    }
    return ((t0-t1));


}

void insertArray(unsigned diff, unsigned pos, int* times){
    for(int i = 0; i<10; i++){
        if(times[i] == 0){
            times[i] = diff;
            break;
        }
    }
}


int computeStats(int times[]){

    int i,j;

    for(i = 0; i<9;i++){
        for(j =0; j<9-i;j++){
            if(times[j] > times[j+1]){


                int temp = times[j];
                times[j] = times[j+1];
                times[j+1] = temp;

            }
        }

    }

    unsigned min = times[0];
    unsigned max = times[9];
    unsigned median = times[5];
    unsigned avg = 0;

    for(i = 0; i< 10; i++){
        avg+=times[i];
    }
    avg = avg/10;

    printf("Min: %u", min);
    printf("Max: %u", max);
    printf("Median: %u", median);
    printf("Avg: %u", avg);

    return 0;
}


unsigned int toggleLight(int flashes, int pattern){
    unsigned int t;
    tmr :> t;
    unsigned int result;

    for(int i = 0; i<flashes*2; i++){
        t+=FLASH_DELAY;
        tmr when timerafter(t):> result;
        pattern = pattern ^1;

        oLed <: pattern;
        oLed2 <: pattern;

    }
    return result;


}

int main(){

 unsigned pattern = 0b0;

 unsigned t;
 unsigned t2;
 unsigned value;
 unsigned diff;
 unsigned delay;
 unsigned pos = 0;
 unsigned int oldButton;

 iButton :> value;
 //value = value&1;
 tmr :> t;
 while(1){
    //3 initial flashes:
    t += toggleLight(3, pattern);

    delay = XS1_TIMER_HZ+rand()%XS1_TIMER_HZ;
    t+=delay;
    //wait for until after the delay
    tmr when timerafter(t):> t;

    iButton :> oldButton;
    oLed<:1; //turn on LEDs
    oLed2<:1;


    //when change in button state
    iButton when pinsneq ( value ) :> value ;

   // if((value&1) < (oldButton&1)){

    tmr :>t2; //grab reaction time stamp

    diff = compute_difference(t,t2);
    printf("Diff Pos: %u %u\n", pos, diff);

    insertArray(diff, pos, times);
    pos++;
    if(pos == 10){
        computeStats(times);
        break;
    }

    t += XS1_TIMER_HZ;
   // }


 }
 return 0;

}
